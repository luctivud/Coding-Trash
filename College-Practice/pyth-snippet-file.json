{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"CPTemplate": {
		"prefix": "udit-python-plate",
		"body": [
			"'''     ░░█ ▄▀█ █   █▀ █░█ █▀█ █▀▀ █▀▀   █▀█ ▄▀█ █▀▄▀█  ",
			"        █▄█ █▀█ █   ▄█ █▀█ █▀▄ ██▄ ██▄   █▀▄ █▀█ █░▀░█     '''",
			"",
			"",
			"# [$TM_FILENAME] => [$CURRENT_DATE-$CURRENT_MONTH-$CURRENT_YEAR @ $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND] ",
			"# Author & Template by : Udit \"luctivud\" Gupta",
			"# https://www.linkedin.com/in/udit-gupta-1b7863135/",
			"",
			"",
			"import math;   from collections import *",
			"import sys;    from functools import reduce",
			"import time;   from itertools import groupby",
			"",
			"# sys.setrecursionlimit(10**6)",
			"",
			"def input()         : return sys.stdin.readline()",
			"def get_ints()      : return map(int, input().strip().split())",
			"def get_list()      : return list(get_ints())",
			"def get_string()    : return list(input().strip().split())",
			"def printxsp(*args) : return print(*args, end=\"\")",
			"def printsp(*args)  : return print(*args, end=\" \")",
			"",
			"",
			"DIRECTIONS = [(+0, +1), (+0, -1), (+1, +0), (+1, -1)] ", 
			"NEIGHBOURS = [(-1, -1), (-1, +0), (-1, +1), (+0, -1),\\",
			"              (+1, +1), (+1, +0), (+1, -1), (+0, +1)]",
			"",
			"",
			"CAPS_ALPHABETS = {chr(i+ord('A')) : i for i in range(26)}",
			"SMOL_ALPHABETS = {chr(i+ord('a')) : i for i in range(26)}",
			"INF = float('inf')",
			"",
			"",
			"# Custom input output is now piped through terminal commands.",
			"",
			"",
			"S34t = time.time()",
			"# for _testcases_ in range(int(input())): $0",
			"",
			"",
			"",
			"S34p = time.time()",
			"# print(\"Time Elapsed: {}\".format(float(S34p-S34t)))",
			"$1"

		],
		"description": "CPTemplate"
	  }
}